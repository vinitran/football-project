// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/sm"
)

// Feedback is an object representing the database table.
type Feedback struct {
	FeedbackType string    `db:"feedback_type,pk" `
	UserID       string    `db:"user_id,pk" `
	ItemID       string    `db:"item_id,pk" `
	TimeStamp    time.Time `db:"time_stamp" `
	Comment      string    `db:"comment" `
}

// FeedbackSlice is an alias for a slice of pointers to Feedback.
// This should almost always be used instead of []*Feedback.
type FeedbackSlice []*Feedback

// FeedbacksTable contains methods to work with the feedback table
var FeedbacksTable = psql.NewTablex[*Feedback, FeedbackSlice, *FeedbackSetter]("", "feedback")

// FeedbacksQuery is a query on the feedback table
type FeedbacksQuery = *psql.TableQuery[*Feedback, FeedbackSlice, *FeedbackSetter]

// FeedbacksStmt is a prepared statment on feedback
type FeedbacksStmt = bob.QueryStmt[*Feedback, FeedbackSlice]

// FeedbackSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type FeedbackSetter struct {
	FeedbackType omit.Val[string]    `db:"feedback_type,pk"`
	UserID       omit.Val[string]    `db:"user_id,pk"`
	ItemID       omit.Val[string]    `db:"item_id,pk"`
	TimeStamp    omit.Val[time.Time] `db:"time_stamp"`
	Comment      omit.Val[string]    `db:"comment"`
}

type feedbackColumnNames struct {
	FeedbackType string
	UserID       string
	ItemID       string
	TimeStamp    string
	Comment      string
}

var FeedbackColumns = struct {
	FeedbackType psql.Expression
	UserID       psql.Expression
	ItemID       psql.Expression
	TimeStamp    psql.Expression
	Comment      psql.Expression
}{
	FeedbackType: psql.Quote("feedback", "feedback_type"),
	UserID:       psql.Quote("feedback", "user_id"),
	ItemID:       psql.Quote("feedback", "item_id"),
	TimeStamp:    psql.Quote("feedback", "time_stamp"),
	Comment:      psql.Quote("feedback", "comment"),
}

type feedbackWhere[Q psql.Filterable] struct {
	FeedbackType psql.WhereMod[Q, string]
	UserID       psql.WhereMod[Q, string]
	ItemID       psql.WhereMod[Q, string]
	TimeStamp    psql.WhereMod[Q, time.Time]
	Comment      psql.WhereMod[Q, string]
}

func FeedbackWhere[Q psql.Filterable]() feedbackWhere[Q] {
	return feedbackWhere[Q]{
		FeedbackType: psql.Where[Q, string](FeedbackColumns.FeedbackType),
		UserID:       psql.Where[Q, string](FeedbackColumns.UserID),
		ItemID:       psql.Where[Q, string](FeedbackColumns.ItemID),
		TimeStamp:    psql.Where[Q, time.Time](FeedbackColumns.TimeStamp),
		Comment:      psql.Where[Q, string](FeedbackColumns.Comment),
	}
}

// Feedbacks begins a query on feedback
func Feedbacks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) FeedbacksQuery {
	return FeedbacksTable.Query(ctx, exec, mods...)
}

// FindFeedback retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindFeedback(ctx context.Context, exec bob.Executor, FeedbackTypePK string, UserIDPK string, ItemIDPK string, cols ...string) (*Feedback, error) {
	if len(cols) == 0 {
		return FeedbacksTable.Query(
			ctx, exec,
			SelectWhere.Feedbacks.FeedbackType.EQ(FeedbackTypePK),
			SelectWhere.Feedbacks.UserID.EQ(UserIDPK),
			SelectWhere.Feedbacks.ItemID.EQ(ItemIDPK),
		).One()
	}

	return FeedbacksTable.Query(
		ctx, exec,
		SelectWhere.Feedbacks.FeedbackType.EQ(FeedbackTypePK),
		SelectWhere.Feedbacks.UserID.EQ(UserIDPK),
		SelectWhere.Feedbacks.ItemID.EQ(ItemIDPK),
		sm.Columns(FeedbacksTable.Columns().Only(cols...)),
	).One()
}

// FeedbackExists checks the presence of a single record by primary key
func FeedbackExists(ctx context.Context, exec bob.Executor, FeedbackTypePK string, UserIDPK string, ItemIDPK string) (bool, error) {
	return FeedbacksTable.Query(
		ctx, exec,
		SelectWhere.Feedbacks.FeedbackType.EQ(FeedbackTypePK),
		SelectWhere.Feedbacks.UserID.EQ(UserIDPK),
		SelectWhere.Feedbacks.ItemID.EQ(ItemIDPK),
	).Exists()
}

// Update uses an executor to update the Feedback
func (o *Feedback) Update(ctx context.Context, exec bob.Executor, cols ...string) (int64, error) {
	rowsAff, err := FeedbacksTable.Update(ctx, exec, o, cols...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

// Delete deletes a single Feedback record with an executor
func (o *Feedback) Delete(ctx context.Context, exec bob.Executor) (int64, error) {
	return FeedbacksTable.Delete(ctx, exec, o)
}

// Reload refreshes the Feedback using the executor
func (o *Feedback) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := FeedbacksTable.Query(
		ctx, exec,
		SelectWhere.Feedbacks.FeedbackType.EQ(o.FeedbackType),
		SelectWhere.Feedbacks.UserID.EQ(o.UserID),
		SelectWhere.Feedbacks.ItemID.EQ(o.ItemID),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o FeedbackSlice) DeleteAll(ctx context.Context, exec bob.Executor) (int64, error) {
	return FeedbacksTable.DeleteMany(ctx, exec, o...)
}

func (o FeedbackSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals FeedbackSetter) (int64, error) {
	rowsAff, err := FeedbacksTable.UpdateMany(ctx, exec, &vals, o...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

func (o FeedbackSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	FeedbackTypePK := make([]string, len(o))
	UserIDPK := make([]string, len(o))
	ItemIDPK := make([]string, len(o))

	for i, o := range o {
		FeedbackTypePK[i] = o.FeedbackType
		UserIDPK[i] = o.UserID
		ItemIDPK[i] = o.ItemID
	}

	mods = append(mods,
		SelectWhere.Feedbacks.FeedbackType.In(FeedbackTypePK...),
		SelectWhere.Feedbacks.UserID.In(UserIDPK...),
		SelectWhere.Feedbacks.ItemID.In(ItemIDPK...),
	)

	o2, err := Feedbacks(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.FeedbackType != old.FeedbackType {
				continue
			}
			if new.UserID != old.UserID {
				continue
			}
			if new.ItemID != old.ItemID {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
