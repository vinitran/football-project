// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"encoding/json"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/types"
)

// User is an object representing the database table.
type User struct {
	UserID    string                      `db:"user_id,pk" `
	Labels    types.JSON[json.RawMessage] `db:"labels" `
	Subscribe types.JSON[json.RawMessage] `db:"subscribe" `
	Comment   string                      `db:"comment" `
}

// UserSlice is an alias for a slice of pointers to User.
// This should almost always be used instead of []*User.
type UserSlice []*User

// UsersTable contains methods to work with the users table
var UsersTable = psql.NewTablex[*User, UserSlice, *UserSetter]("", "users")

// UsersQuery is a query on the users table
type UsersQuery = *psql.TableQuery[*User, UserSlice, *UserSetter]

// UsersStmt is a prepared statment on users
type UsersStmt = bob.QueryStmt[*User, UserSlice]

// UserSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSetter struct {
	UserID    omit.Val[string]                      `db:"user_id,pk"`
	Labels    omit.Val[types.JSON[json.RawMessage]] `db:"labels"`
	Subscribe omit.Val[types.JSON[json.RawMessage]] `db:"subscribe"`
	Comment   omit.Val[string]                      `db:"comment"`
}

type userColumnNames struct {
	UserID    string
	Labels    string
	Subscribe string
	Comment   string
}

var UserColumns = struct {
	UserID    psql.Expression
	Labels    psql.Expression
	Subscribe psql.Expression
	Comment   psql.Expression
}{
	UserID:    psql.Quote("users", "user_id"),
	Labels:    psql.Quote("users", "labels"),
	Subscribe: psql.Quote("users", "subscribe"),
	Comment:   psql.Quote("users", "comment"),
}

type userWhere[Q psql.Filterable] struct {
	UserID    psql.WhereMod[Q, string]
	Labels    psql.WhereMod[Q, types.JSON[json.RawMessage]]
	Subscribe psql.WhereMod[Q, types.JSON[json.RawMessage]]
	Comment   psql.WhereMod[Q, string]
}

func UserWhere[Q psql.Filterable]() userWhere[Q] {
	return userWhere[Q]{
		UserID:    psql.Where[Q, string](UserColumns.UserID),
		Labels:    psql.Where[Q, types.JSON[json.RawMessage]](UserColumns.Labels),
		Subscribe: psql.Where[Q, types.JSON[json.RawMessage]](UserColumns.Subscribe),
		Comment:   psql.Where[Q, string](UserColumns.Comment),
	}
}

// Users begins a query on users
func Users(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return UsersTable.Query(ctx, exec, mods...)
}

// FindUser retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUser(ctx context.Context, exec bob.Executor, UserIDPK string, cols ...string) (*User, error) {
	if len(cols) == 0 {
		return UsersTable.Query(
			ctx, exec,
			SelectWhere.Users.UserID.EQ(UserIDPK),
		).One()
	}

	return UsersTable.Query(
		ctx, exec,
		SelectWhere.Users.UserID.EQ(UserIDPK),
		sm.Columns(UsersTable.Columns().Only(cols...)),
	).One()
}

// UserExists checks the presence of a single record by primary key
func UserExists(ctx context.Context, exec bob.Executor, UserIDPK string) (bool, error) {
	return UsersTable.Query(
		ctx, exec,
		SelectWhere.Users.UserID.EQ(UserIDPK),
	).Exists()
}

// Update uses an executor to update the User
func (o *User) Update(ctx context.Context, exec bob.Executor, cols ...string) (int64, error) {
	rowsAff, err := UsersTable.Update(ctx, exec, o, cols...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

// Delete deletes a single User record with an executor
func (o *User) Delete(ctx context.Context, exec bob.Executor) (int64, error) {
	return UsersTable.Delete(ctx, exec, o)
}

// Reload refreshes the User using the executor
func (o *User) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := UsersTable.Query(
		ctx, exec,
		SelectWhere.Users.UserID.EQ(o.UserID),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o UserSlice) DeleteAll(ctx context.Context, exec bob.Executor) (int64, error) {
	return UsersTable.DeleteMany(ctx, exec, o...)
}

func (o UserSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSetter) (int64, error) {
	rowsAff, err := UsersTable.UpdateMany(ctx, exec, &vals, o...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

func (o UserSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	UserIDPK := make([]string, len(o))

	for i, o := range o {
		UserIDPK[i] = o.UserID
	}

	mods = append(mods,
		SelectWhere.Users.UserID.In(UserIDPK...),
	)

	o2, err := Users(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.UserID != old.UserID {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
