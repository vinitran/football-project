// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/sm"
)

// UserInfor is an object representing the database table.
type UserInfor struct {
	ID        uuid.UUID        `db:"id,pk" `
	Username  string           `db:"username" `
	Name      string           `db:"name" `
	Email     null.Val[string] `db:"email" `
	Password  string           `db:"password" `
	CreatedAt time.Time        `db:"created_at" `
	UpdatedAt time.Time        `db:"updated_at" `
}

// UserInforSlice is an alias for a slice of pointers to UserInfor.
// This should almost always be used instead of []*UserInfor.
type UserInforSlice []*UserInfor

// UserInforsTable contains methods to work with the user_infor table
var UserInforsTable = psql.NewTablex[*UserInfor, UserInforSlice, *UserInforSetter]("", "user_infor")

// UserInforsQuery is a query on the user_infor table
type UserInforsQuery = *psql.TableQuery[*UserInfor, UserInforSlice, *UserInforSetter]

// UserInforsStmt is a prepared statment on user_infor
type UserInforsStmt = bob.QueryStmt[*UserInfor, UserInforSlice]

// UserInforSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserInforSetter struct {
	ID        omit.Val[uuid.UUID]  `db:"id,pk"`
	Username  omit.Val[string]     `db:"username"`
	Name      omit.Val[string]     `db:"name"`
	Email     omitnull.Val[string] `db:"email"`
	Password  omit.Val[string]     `db:"password"`
	CreatedAt omit.Val[time.Time]  `db:"created_at"`
	UpdatedAt omit.Val[time.Time]  `db:"updated_at"`
}

type userInforColumnNames struct {
	ID        string
	Username  string
	Name      string
	Email     string
	Password  string
	CreatedAt string
	UpdatedAt string
}

var UserInforColumns = struct {
	ID        psql.Expression
	Username  psql.Expression
	Name      psql.Expression
	Email     psql.Expression
	Password  psql.Expression
	CreatedAt psql.Expression
	UpdatedAt psql.Expression
}{
	ID:        psql.Quote("user_infor", "id"),
	Username:  psql.Quote("user_infor", "username"),
	Name:      psql.Quote("user_infor", "name"),
	Email:     psql.Quote("user_infor", "email"),
	Password:  psql.Quote("user_infor", "password"),
	CreatedAt: psql.Quote("user_infor", "created_at"),
	UpdatedAt: psql.Quote("user_infor", "updated_at"),
}

type userInforWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, uuid.UUID]
	Username  psql.WhereMod[Q, string]
	Name      psql.WhereMod[Q, string]
	Email     psql.WhereNullMod[Q, string]
	Password  psql.WhereMod[Q, string]
	CreatedAt psql.WhereMod[Q, time.Time]
	UpdatedAt psql.WhereMod[Q, time.Time]
}

func UserInforWhere[Q psql.Filterable]() userInforWhere[Q] {
	return userInforWhere[Q]{
		ID:        psql.Where[Q, uuid.UUID](UserInforColumns.ID),
		Username:  psql.Where[Q, string](UserInforColumns.Username),
		Name:      psql.Where[Q, string](UserInforColumns.Name),
		Email:     psql.WhereNull[Q, string](UserInforColumns.Email),
		Password:  psql.Where[Q, string](UserInforColumns.Password),
		CreatedAt: psql.Where[Q, time.Time](UserInforColumns.CreatedAt),
		UpdatedAt: psql.Where[Q, time.Time](UserInforColumns.UpdatedAt),
	}
}

// UserInfors begins a query on user_infor
func UserInfors(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UserInforsQuery {
	return UserInforsTable.Query(ctx, exec, mods...)
}

// FindUserInfor retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUserInfor(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*UserInfor, error) {
	if len(cols) == 0 {
		return UserInforsTable.Query(
			ctx, exec,
			SelectWhere.UserInfors.ID.EQ(IDPK),
		).One()
	}

	return UserInforsTable.Query(
		ctx, exec,
		SelectWhere.UserInfors.ID.EQ(IDPK),
		sm.Columns(UserInforsTable.Columns().Only(cols...)),
	).One()
}

// UserInforExists checks the presence of a single record by primary key
func UserInforExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return UserInforsTable.Query(
		ctx, exec,
		SelectWhere.UserInfors.ID.EQ(IDPK),
	).Exists()
}

// Update uses an executor to update the UserInfor
func (o *UserInfor) Update(ctx context.Context, exec bob.Executor, cols ...string) (int64, error) {
	rowsAff, err := UserInforsTable.Update(ctx, exec, o, cols...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

// Delete deletes a single UserInfor record with an executor
func (o *UserInfor) Delete(ctx context.Context, exec bob.Executor) (int64, error) {
	return UserInforsTable.Delete(ctx, exec, o)
}

// Reload refreshes the UserInfor using the executor
func (o *UserInfor) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := UserInforsTable.Query(
		ctx, exec,
		SelectWhere.UserInfors.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o UserInforSlice) DeleteAll(ctx context.Context, exec bob.Executor) (int64, error) {
	return UserInforsTable.DeleteMany(ctx, exec, o...)
}

func (o UserInforSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserInforSetter) (int64, error) {
	rowsAff, err := UserInforsTable.UpdateMany(ctx, exec, &vals, o...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

func (o UserInforSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]uuid.UUID, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.UserInfors.ID.In(IDPK...),
	)

	o2, err := UserInfors(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}
