// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/mods"
)

// Tournament is an object representing the database table.
type Tournament struct {
	ID         uuid.UUID `db:"id,pk" `
	Name       string    `db:"name" `
	Slug       string    `db:"slug" `
	Logo       string    `db:"logo" `
	IsFeatured bool      `db:"is_featured" `
	Priority   int       `db:"priority" `
	IDSync     string    `db:"id_sync" `
	CreatedAt  time.Time `db:"created_at" `
	UpdatedAt  time.Time `db:"updated_at" `

	R tournamentR `db:"-" `
}

// TournamentSlice is an alias for a slice of pointers to Tournament.
// This should almost always be used instead of []*Tournament.
type TournamentSlice []*Tournament

// TournamentsTable contains methods to work with the tournaments table
var TournamentsTable = psql.NewTablex[*Tournament, TournamentSlice, *TournamentSetter]("", "tournaments")

// TournamentsQuery is a query on the tournaments table
type TournamentsQuery = *psql.TableQuery[*Tournament, TournamentSlice, *TournamentSetter]

// TournamentsStmt is a prepared statment on tournaments
type TournamentsStmt = bob.QueryStmt[*Tournament, TournamentSlice]

// tournamentR is where relationships are stored.
type tournamentR struct {
	Matchs MatchSlice // matchs.matchs_tournament_id_fkey
}

// TournamentSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TournamentSetter struct {
	ID         omit.Val[uuid.UUID] `db:"id,pk"`
	Name       omit.Val[string]    `db:"name"`
	Slug       omit.Val[string]    `db:"slug"`
	Logo       omit.Val[string]    `db:"logo"`
	IsFeatured omit.Val[bool]      `db:"is_featured"`
	Priority   omit.Val[int]       `db:"priority"`
	IDSync     omit.Val[string]    `db:"id_sync"`
	CreatedAt  omit.Val[time.Time] `db:"created_at"`
	UpdatedAt  omit.Val[time.Time] `db:"updated_at"`
}

type tournamentColumnNames struct {
	ID         string
	Name       string
	Slug       string
	Logo       string
	IsFeatured string
	Priority   string
	IDSync     string
	CreatedAt  string
	UpdatedAt  string
}

type tournamentRelationshipJoins[Q dialect.Joinable] struct {
	Matchs bob.Mod[Q]
}

func buildtournamentRelationshipJoins[Q dialect.Joinable](ctx context.Context, typ string) tournamentRelationshipJoins[Q] {
	return tournamentRelationshipJoins[Q]{
		Matchs: tournamentsJoinMatchs[Q](ctx, typ),
	}
}

func tournamentsJoin[Q dialect.Joinable](ctx context.Context) joinSet[tournamentRelationshipJoins[Q]] {
	return joinSet[tournamentRelationshipJoins[Q]]{
		InnerJoin: buildtournamentRelationshipJoins[Q](ctx, clause.InnerJoin),
		LeftJoin:  buildtournamentRelationshipJoins[Q](ctx, clause.LeftJoin),
		RightJoin: buildtournamentRelationshipJoins[Q](ctx, clause.RightJoin),
	}
}

var TournamentColumns = struct {
	ID         psql.Expression
	Name       psql.Expression
	Slug       psql.Expression
	Logo       psql.Expression
	IsFeatured psql.Expression
	Priority   psql.Expression
	IDSync     psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
}{
	ID:         psql.Quote("tournaments", "id"),
	Name:       psql.Quote("tournaments", "name"),
	Slug:       psql.Quote("tournaments", "slug"),
	Logo:       psql.Quote("tournaments", "logo"),
	IsFeatured: psql.Quote("tournaments", "is_featured"),
	Priority:   psql.Quote("tournaments", "priority"),
	IDSync:     psql.Quote("tournaments", "id_sync"),
	CreatedAt:  psql.Quote("tournaments", "created_at"),
	UpdatedAt:  psql.Quote("tournaments", "updated_at"),
}

type tournamentWhere[Q psql.Filterable] struct {
	ID         psql.WhereMod[Q, uuid.UUID]
	Name       psql.WhereMod[Q, string]
	Slug       psql.WhereMod[Q, string]
	Logo       psql.WhereMod[Q, string]
	IsFeatured psql.WhereMod[Q, bool]
	Priority   psql.WhereMod[Q, int]
	IDSync     psql.WhereMod[Q, string]
	CreatedAt  psql.WhereMod[Q, time.Time]
	UpdatedAt  psql.WhereMod[Q, time.Time]
}

func TournamentWhere[Q psql.Filterable]() tournamentWhere[Q] {
	return tournamentWhere[Q]{
		ID:         psql.Where[Q, uuid.UUID](TournamentColumns.ID),
		Name:       psql.Where[Q, string](TournamentColumns.Name),
		Slug:       psql.Where[Q, string](TournamentColumns.Slug),
		Logo:       psql.Where[Q, string](TournamentColumns.Logo),
		IsFeatured: psql.Where[Q, bool](TournamentColumns.IsFeatured),
		Priority:   psql.Where[Q, int](TournamentColumns.Priority),
		IDSync:     psql.Where[Q, string](TournamentColumns.IDSync),
		CreatedAt:  psql.Where[Q, time.Time](TournamentColumns.CreatedAt),
		UpdatedAt:  psql.Where[Q, time.Time](TournamentColumns.UpdatedAt),
	}
}

// Tournaments begins a query on tournaments
func Tournaments(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TournamentsQuery {
	return TournamentsTable.Query(ctx, exec, mods...)
}

// FindTournament retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTournament(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*Tournament, error) {
	if len(cols) == 0 {
		return TournamentsTable.Query(
			ctx, exec,
			SelectWhere.Tournaments.ID.EQ(IDPK),
		).One()
	}

	return TournamentsTable.Query(
		ctx, exec,
		SelectWhere.Tournaments.ID.EQ(IDPK),
		sm.Columns(TournamentsTable.Columns().Only(cols...)),
	).One()
}

// TournamentExists checks the presence of a single record by primary key
func TournamentExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return TournamentsTable.Query(
		ctx, exec,
		SelectWhere.Tournaments.ID.EQ(IDPK),
	).Exists()
}

// Update uses an executor to update the Tournament
func (o *Tournament) Update(ctx context.Context, exec bob.Executor, cols ...string) (int64, error) {
	rowsAff, err := TournamentsTable.Update(ctx, exec, o, cols...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

// Delete deletes a single Tournament record with an executor
func (o *Tournament) Delete(ctx context.Context, exec bob.Executor) (int64, error) {
	return TournamentsTable.Delete(ctx, exec, o)
}

// Reload refreshes the Tournament using the executor
func (o *Tournament) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := TournamentsTable.Query(
		ctx, exec,
		SelectWhere.Tournaments.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o TournamentSlice) DeleteAll(ctx context.Context, exec bob.Executor) (int64, error) {
	return TournamentsTable.DeleteMany(ctx, exec, o...)
}

func (o TournamentSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TournamentSetter) (int64, error) {
	rowsAff, err := TournamentsTable.UpdateMany(ctx, exec, &vals, o...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

func (o TournamentSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]uuid.UUID, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Tournaments.ID.In(IDPK...),
	)

	o2, err := Tournaments(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func tournamentsJoinMatchs[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, MatchsTable.Name(ctx)).On(
			MatchColumns.TournamentID.EQ(TournamentColumns.ID),
		),
	}
}

// Matchs starts a query for related objects on matchs
func (o *Tournament) Matchs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) MatchsQuery {
	return Matchs(ctx, exec, append(mods,
		sm.Where(MatchColumns.TournamentID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os TournamentSlice) Matchs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) MatchsQuery {
	PKArgs := make([]bob.Expression, 0, len(os))
	for _, o := range os {
		PKArgs = append(PKArgs, psql.ArgGroup(o.ID))
	}

	return Matchs(ctx, exec, append(mods,
		sm.Where(psql.Group(MatchColumns.TournamentID).In(PKArgs...)),
	)...)
}

func (o *Tournament) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Matchs":
		rels, ok := retrieved.(MatchSlice)
		if !ok {
			return fmt.Errorf("tournament cannot load %T as %q", retrieved, name)
		}

		o.R.Matchs = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Tournament = o
			}
		}
		return nil
	default:
		return fmt.Errorf("tournament has no relationship %q", name)
	}
}

func ThenLoadTournamentMatchs(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTournamentMatchs(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TournamentMatchs", retrieved)
		}

		err := loader.LoadTournamentMatchs(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTournamentMatchs loads the tournament's Matchs into the .R struct
func (o *Tournament) LoadTournamentMatchs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Matchs = nil

	related, err := o.Matchs(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Tournament = o
	}

	o.R.Matchs = related
	return nil
}

// LoadTournamentMatchs loads the tournament's Matchs into the .R struct
func (os TournamentSlice) LoadTournamentMatchs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	matchs, err := os.Matchs(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Matchs = nil
	}

	for _, o := range os {
		for _, rel := range matchs {
			if o.ID != rel.TournamentID {
				continue
			}

			rel.R.Tournament = o

			o.R.Matchs = append(o.R.Matchs, rel)
		}
	}

	return nil
}

func (o *Tournament) InsertMatchs(ctx context.Context, exec bob.Executor, related ...*MatchSetter) error {
	var err error

	rels := related

	for _, rel := range rels {
		rel.TournamentID = omit.From(o.ID)
	}

	newRels, err := MatchsTable.InsertMany(ctx, exec, related...)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	o.R.Matchs = append(o.R.Matchs, newRels...)

	for _, rel := range newRels {
		rel.R.Tournament = o
	}

	return nil
}

func (o *Tournament) AttachMatchs(ctx context.Context, exec bob.Executor, related ...*Match) error {

	for _, rel := range related {
		rel.TournamentID = o.ID
	}

	if _, err := MatchsTable.UpdateMany(
		ctx, exec, &MatchSetter{
			TournamentID: omit.From(o.ID),
		}, related...,
	); err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	o.R.Matchs = append(o.R.Matchs, related...)

	for _, rel := range related {
		rel.R.Tournament = o
	}

	return nil
}
