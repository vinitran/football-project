// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	models "core/internal/content/bob"
	"github.com/aarondl/opt/omit"
	"github.com/google/uuid"
	"github.com/jaswdr/faker"
	"github.com/stephenafamo/bob"
)

type TournamentMod interface {
	Apply(*TournamentTemplate)
}

type TournamentModFunc func(*TournamentTemplate)

func (f TournamentModFunc) Apply(n *TournamentTemplate) {
	f(n)
}

type TournamentModSlice []TournamentMod

func (mods TournamentModSlice) Apply(n *TournamentTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// TournamentTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type TournamentTemplate struct {
	ID         func() uuid.UUID
	Name       func() string
	Slug       func() string
	Logo       func() string
	IsFeatured func() bool
	Priority   func() int
	IDSync     func() string
	CreatedAt  func() time.Time
	UpdatedAt  func() time.Time

	r tournamentR
	f *factory
}

type tournamentR struct {
	Matchs []*tournamentRMatchsR
}

type tournamentRMatchsR struct {
	number int
	o      *MatchTemplate
}

// Apply mods to the TournamentTemplate
func (o *TournamentTemplate) Apply(mods ...TournamentMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Tournament
// this does nothing with the relationship templates
func (o TournamentTemplate) toModel() *models.Tournament {
	m := &models.Tournament{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Slug != nil {
		m.Slug = o.Slug()
	}
	if o.Logo != nil {
		m.Logo = o.Logo()
	}
	if o.IsFeatured != nil {
		m.IsFeatured = o.IsFeatured()
	}
	if o.Priority != nil {
		m.Priority = o.Priority()
	}
	if o.IDSync != nil {
		m.IDSync = o.IDSync()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.TournamentSlice
// this does nothing with the relationship templates
func (o TournamentTemplate) toModels(number int) models.TournamentSlice {
	m := make(models.TournamentSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Tournament
// according to the relationships in the template. Nothing is inserted into the db
func (t TournamentTemplate) setModelRels(o *models.Tournament) {
	if t.r.Matchs != nil {
		rel := models.MatchSlice{}
		for _, r := range t.r.Matchs {
			related := r.o.toModels(r.number)
			for _, rel := range related {
				rel.TournamentID = o.ID
				rel.R.Tournament = o
			}
			rel = append(rel, related...)
		}
		o.R.Matchs = rel
	}

}

// BuildSetter returns an *models.TournamentSetter
// this does nothing with the relationship templates
func (o TournamentTemplate) BuildSetter() *models.TournamentSetter {
	m := &models.TournamentSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.Slug != nil {
		m.Slug = omit.From(o.Slug())
	}
	if o.Logo != nil {
		m.Logo = omit.From(o.Logo())
	}
	if o.IsFeatured != nil {
		m.IsFeatured = omit.From(o.IsFeatured())
	}
	if o.Priority != nil {
		m.Priority = omit.From(o.Priority())
	}
	if o.IDSync != nil {
		m.IDSync = omit.From(o.IDSync())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.TournamentSetter
// this does nothing with the relationship templates
func (o TournamentTemplate) BuildManySetter(number int) []*models.TournamentSetter {
	m := make([]*models.TournamentSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Tournament
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TournamentTemplate.Create
func (o TournamentTemplate) Build() *models.Tournament {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.TournamentSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use TournamentTemplate.CreateMany
func (o TournamentTemplate) BuildMany(number int) models.TournamentSlice {
	m := make(models.TournamentSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableTournament(m *models.TournamentSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random[uuid.UUID](nil))
	}
	if m.Name.IsUnset() {
		m.Name = omit.From(random[string](nil))
	}
	if m.Slug.IsUnset() {
		m.Slug = omit.From(random[string](nil))
	}
	if m.Logo.IsUnset() {
		m.Logo = omit.From(random[string](nil))
	}
	if m.IDSync.IsUnset() {
		m.IDSync = omit.From(random[string](nil))
	}
	if m.CreatedAt.IsUnset() {
		m.CreatedAt = omit.From(random[time.Time](nil))
	}
	if m.UpdatedAt.IsUnset() {
		m.UpdatedAt = omit.From(random[time.Time](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Tournament
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *TournamentTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Tournament) (context.Context, error) {
	var err error

	if o.r.Matchs != nil {
		for _, r := range o.r.Matchs {
			var rel0 models.MatchSlice
			ctx, rel0, err = r.o.createMany(ctx, exec, r.number)
			if err != nil {
				return ctx, err
			}

			err = m.AttachMatchs(ctx, exec, rel0...)
			if err != nil {
				return ctx, err
			}
		}
	}

	return ctx, err
}

// Create builds a tournament and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *TournamentTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Tournament, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a tournament and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *TournamentTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Tournament, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableTournament(opt)

	m, err := models.TournamentsTable.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = tournamentCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple tournaments and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o TournamentTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.TournamentSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple tournaments and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o TournamentTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.TournamentSlice, error) {
	var err error
	m := make(models.TournamentSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Tournament has methods that act as mods for the TournamentTemplate
var TournamentMods tournamentMods

type tournamentMods struct{}

func (m tournamentMods) RandomizeAllColumns(f *faker.Faker) TournamentMod {
	return TournamentModSlice{
		TournamentMods.RandomID(f),
		TournamentMods.RandomName(f),
		TournamentMods.RandomSlug(f),
		TournamentMods.RandomLogo(f),
		TournamentMods.RandomIsFeatured(f),
		TournamentMods.RandomPriority(f),
		TournamentMods.RandomIDSync(f),
		TournamentMods.RandomCreatedAt(f),
		TournamentMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m tournamentMods) ID(val uuid.UUID) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) IDFunc(f func() uuid.UUID) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetID() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomID(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.ID = func() uuid.UUID {
			return random[uuid.UUID](f)
		}
	})
}

func (m tournamentMods) ensureID(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() uuid.UUID {
			return random[uuid.UUID](f)
		}
	})
}

// Set the model columns to this value
func (m tournamentMods) Name(val string) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) NameFunc(f func() string) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetName() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomName(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Name = func() string {
			return random[string](f)
		}
	})
}

func (m tournamentMods) ensureName(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.Name != nil {
			return
		}

		o.Name = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m tournamentMods) Slug(val string) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Slug = func() string { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) SlugFunc(f func() string) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Slug = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetSlug() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Slug = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomSlug(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Slug = func() string {
			return random[string](f)
		}
	})
}

func (m tournamentMods) ensureSlug(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.Slug != nil {
			return
		}

		o.Slug = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m tournamentMods) Logo(val string) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Logo = func() string { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) LogoFunc(f func() string) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Logo = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetLogo() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Logo = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomLogo(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Logo = func() string {
			return random[string](f)
		}
	})
}

func (m tournamentMods) ensureLogo(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.Logo != nil {
			return
		}

		o.Logo = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m tournamentMods) IsFeatured(val bool) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.IsFeatured = func() bool { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) IsFeaturedFunc(f func() bool) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.IsFeatured = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetIsFeatured() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.IsFeatured = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomIsFeatured(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.IsFeatured = func() bool {
			return random[bool](f)
		}
	})
}

func (m tournamentMods) ensureIsFeatured(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.IsFeatured != nil {
			return
		}

		o.IsFeatured = func() bool {
			return random[bool](f)
		}
	})
}

// Set the model columns to this value
func (m tournamentMods) Priority(val int) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Priority = func() int { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) PriorityFunc(f func() int) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Priority = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetPriority() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Priority = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomPriority(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.Priority = func() int {
			return random[int](f)
		}
	})
}

func (m tournamentMods) ensurePriority(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.Priority != nil {
			return
		}

		o.Priority = func() int {
			return random[int](f)
		}
	})
}

// Set the model columns to this value
func (m tournamentMods) IDSync(val string) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.IDSync = func() string { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) IDSyncFunc(f func() string) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.IDSync = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetIDSync() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.IDSync = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomIDSync(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.IDSync = func() string {
			return random[string](f)
		}
	})
}

func (m tournamentMods) ensureIDSync(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.IDSync != nil {
			return
		}

		o.IDSync = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m tournamentMods) CreatedAt(val time.Time) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) CreatedAtFunc(f func() time.Time) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetCreatedAt() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomCreatedAt(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.CreatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m tournamentMods) ensureCreatedAt(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.CreatedAt != nil {
			return
		}

		o.CreatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

// Set the model columns to this value
func (m tournamentMods) UpdatedAt(val time.Time) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m tournamentMods) UpdatedAtFunc(f func() time.Time) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m tournamentMods) UnsetUpdatedAt() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m tournamentMods) RandomUpdatedAt(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.UpdatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m tournamentMods) ensureUpdatedAt(f *faker.Faker) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		if o.UpdatedAt != nil {
			return
		}

		o.UpdatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m tournamentMods) WithMatchs(number int, related *MatchTemplate) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.r.Matchs = []*tournamentRMatchsR{{
			number: number,
			o:      related,
		}}
	})
}

func (m tournamentMods) WithNewMatchs(number int, mods ...MatchMod) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {

		related := o.f.NewMatch(mods...)
		m.WithMatchs(number, related).Apply(o)
	})
}

func (m tournamentMods) AddMatchs(number int, related *MatchTemplate) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.r.Matchs = append(o.r.Matchs, &tournamentRMatchsR{
			number: number,
			o:      related,
		})
	})
}

func (m tournamentMods) AddNewMatchs(number int, mods ...MatchMod) TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {

		related := o.f.NewMatch(mods...)
		m.AddMatchs(number, related).Apply(o)
	})
}

func (m tournamentMods) WithoutMatchs() TournamentMod {
	return TournamentModFunc(func(o *TournamentTemplate) {
		o.r.Matchs = nil
	})
}
