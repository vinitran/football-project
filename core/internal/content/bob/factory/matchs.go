// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"encoding/json"
	"time"

	models "core/internal/content/bob"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
)

type MatchMod interface {
	Apply(*MatchTemplate)
}

type MatchModFunc func(*MatchTemplate)

func (f MatchModFunc) Apply(n *MatchTemplate) {
	f(n)
}

type MatchModSlice []MatchMod

func (mods MatchModSlice) Apply(n *MatchTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// MatchTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type MatchTemplate struct {
	ID           func() string
	Name         func() string
	Slug         func() string
	Date         func() string
	Timestamp    func() int64
	HomeRedCards func() int
	AwayRedCards func() int
	HomeID       func() string
	AwayID       func() string
	TournamentID func() string
	Scores       func() types.JSON[json.RawMessage]
	WinCode      func() null.Val[int]
	MatchStatus  func() MatchStatus
	SportType    func() null.Val[string]
	HasLineup    func() null.Val[bool]
	HasTracker   func() null.Val[bool]
	IsFeatured   func() null.Val[bool]
	ThumbnailURL func() null.Val[string]
	IsLive       func() null.Val[bool]
	LiveTracker  func() null.Val[string]
	CreatedAt    func() time.Time
	UpdatedAt    func() time.Time

	r matchR
	f *factory
}

type matchR struct {
	AwayTeam   *matchRAwayTeamR
	HomeTeam   *matchRHomeTeamR
	Tournament *matchRTournamentR
}

type matchRAwayTeamR struct {
	o *TeamTemplate
}
type matchRHomeTeamR struct {
	o *TeamTemplate
}
type matchRTournamentR struct {
	o *TournamentTemplate
}

// Apply mods to the MatchTemplate
func (o *MatchTemplate) Apply(mods ...MatchMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Match
// this does nothing with the relationship templates
func (o MatchTemplate) toModel() *models.Match {
	m := &models.Match{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Slug != nil {
		m.Slug = o.Slug()
	}
	if o.Date != nil {
		m.Date = o.Date()
	}
	if o.Timestamp != nil {
		m.Timestamp = o.Timestamp()
	}
	if o.HomeRedCards != nil {
		m.HomeRedCards = o.HomeRedCards()
	}
	if o.AwayRedCards != nil {
		m.AwayRedCards = o.AwayRedCards()
	}
	if o.HomeID != nil {
		m.HomeID = o.HomeID()
	}
	if o.AwayID != nil {
		m.AwayID = o.AwayID()
	}
	if o.TournamentID != nil {
		m.TournamentID = o.TournamentID()
	}
	if o.Scores != nil {
		m.Scores = o.Scores()
	}
	if o.WinCode != nil {
		m.WinCode = o.WinCode()
	}
	if o.MatchStatus != nil {
		m.MatchStatus = o.MatchStatus()
	}
	if o.SportType != nil {
		m.SportType = o.SportType()
	}
	if o.HasLineup != nil {
		m.HasLineup = o.HasLineup()
	}
	if o.HasTracker != nil {
		m.HasTracker = o.HasTracker()
	}
	if o.IsFeatured != nil {
		m.IsFeatured = o.IsFeatured()
	}
	if o.ThumbnailURL != nil {
		m.ThumbnailURL = o.ThumbnailURL()
	}
	if o.IsLive != nil {
		m.IsLive = o.IsLive()
	}
	if o.LiveTracker != nil {
		m.LiveTracker = o.LiveTracker()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.MatchSlice
// this does nothing with the relationship templates
func (o MatchTemplate) toModels(number int) models.MatchSlice {
	m := make(models.MatchSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Match
// according to the relationships in the template. Nothing is inserted into the db
func (t MatchTemplate) setModelRels(o *models.Match) {
	if t.r.AwayTeam != nil {
		rel := t.r.AwayTeam.o.toModel()
		rel.R.AwayMatchs = append(rel.R.AwayMatchs, o)
		o.AwayID = rel.ID
		o.R.AwayTeam = rel
	}

	if t.r.HomeTeam != nil {
		rel := t.r.HomeTeam.o.toModel()
		rel.R.HomeMatchs = append(rel.R.HomeMatchs, o)
		o.HomeID = rel.ID
		o.R.HomeTeam = rel
	}

	if t.r.Tournament != nil {
		rel := t.r.Tournament.o.toModel()
		rel.R.Matchs = append(rel.R.Matchs, o)
		o.TournamentID = rel.ID
		o.R.Tournament = rel
	}

}

// BuildSetter returns an *models.MatchSetter
// this does nothing with the relationship templates
func (o MatchTemplate) BuildSetter() *models.MatchSetter {
	m := &models.MatchSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.Slug != nil {
		m.Slug = omit.From(o.Slug())
	}
	if o.Date != nil {
		m.Date = omit.From(o.Date())
	}
	if o.Timestamp != nil {
		m.Timestamp = omit.From(o.Timestamp())
	}
	if o.HomeRedCards != nil {
		m.HomeRedCards = omit.From(o.HomeRedCards())
	}
	if o.AwayRedCards != nil {
		m.AwayRedCards = omit.From(o.AwayRedCards())
	}
	if o.HomeID != nil {
		m.HomeID = omit.From(o.HomeID())
	}
	if o.AwayID != nil {
		m.AwayID = omit.From(o.AwayID())
	}
	if o.TournamentID != nil {
		m.TournamentID = omit.From(o.TournamentID())
	}
	if o.Scores != nil {
		m.Scores = omit.From(o.Scores())
	}
	if o.WinCode != nil {
		m.WinCode = omitnull.FromNull(o.WinCode())
	}
	if o.MatchStatus != nil {
		m.MatchStatus = omit.From(o.MatchStatus())
	}
	if o.SportType != nil {
		m.SportType = omitnull.FromNull(o.SportType())
	}
	if o.HasLineup != nil {
		m.HasLineup = omitnull.FromNull(o.HasLineup())
	}
	if o.HasTracker != nil {
		m.HasTracker = omitnull.FromNull(o.HasTracker())
	}
	if o.IsFeatured != nil {
		m.IsFeatured = omitnull.FromNull(o.IsFeatured())
	}
	if o.ThumbnailURL != nil {
		m.ThumbnailURL = omitnull.FromNull(o.ThumbnailURL())
	}
	if o.IsLive != nil {
		m.IsLive = omitnull.FromNull(o.IsLive())
	}
	if o.LiveTracker != nil {
		m.LiveTracker = omitnull.FromNull(o.LiveTracker())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.MatchSetter
// this does nothing with the relationship templates
func (o MatchTemplate) BuildManySetter(number int) []*models.MatchSetter {
	m := make([]*models.MatchSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Match
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use MatchTemplate.Create
func (o MatchTemplate) Build() *models.Match {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.MatchSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use MatchTemplate.CreateMany
func (o MatchTemplate) BuildMany(number int) models.MatchSlice {
	m := make(models.MatchSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableMatch(m *models.MatchSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random[string](nil))
	}
	if m.Name.IsUnset() {
		m.Name = omit.From(random[string](nil))
	}
	if m.Slug.IsUnset() {
		m.Slug = omit.From(random[string](nil))
	}
	if m.Date.IsUnset() {
		m.Date = omit.From(random[string](nil))
	}
	if m.Timestamp.IsUnset() {
		m.Timestamp = omit.From(random[int64](nil))
	}
	if m.HomeID.IsUnset() {
		m.HomeID = omit.From(random[string](nil))
	}
	if m.AwayID.IsUnset() {
		m.AwayID = omit.From(random[string](nil))
	}
	if m.TournamentID.IsUnset() {
		m.TournamentID = omit.From(random[string](nil))
	}
	if m.Scores.IsUnset() {
		m.Scores = omit.From(random[types.JSON[json.RawMessage]](nil))
	}
	if m.MatchStatus.IsUnset() {
		m.MatchStatus = omit.From(random[MatchStatus](nil))
	}
	if m.CreatedAt.IsUnset() {
		m.CreatedAt = omit.From(random[time.Time](nil))
	}
	if m.UpdatedAt.IsUnset() {
		m.UpdatedAt = omit.From(random[time.Time](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Match
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *MatchTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Match) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a match and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *MatchTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Match, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a match and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *MatchTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Match, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableMatch(opt)

	var rel0 *models.Team
	if o.r.AwayTeam == nil {
		var ok bool
		rel0, ok = teamCtx.Value(ctx)
		if !ok {
			MatchMods.WithNewAwayTeam().Apply(o)
		}
	}
	if o.r.AwayTeam != nil {
		ctx, rel0, err = o.r.AwayTeam.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.AwayID = omit.From(rel0.ID)

	var rel1 *models.Team
	if o.r.HomeTeam == nil {
		var ok bool
		rel1, ok = teamCtx.Value(ctx)
		if !ok {
			MatchMods.WithNewHomeTeam().Apply(o)
		}
	}
	if o.r.HomeTeam != nil {
		ctx, rel1, err = o.r.HomeTeam.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.HomeID = omit.From(rel1.ID)

	var rel2 *models.Tournament
	if o.r.Tournament == nil {
		var ok bool
		rel2, ok = tournamentCtx.Value(ctx)
		if !ok {
			MatchMods.WithNewTournament().Apply(o)
		}
	}
	if o.r.Tournament != nil {
		ctx, rel2, err = o.r.Tournament.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.TournamentID = omit.From(rel2.ID)

	m, err := models.MatchsTable.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = matchCtx.WithValue(ctx, m)

	m.R.AwayTeam = rel0
	m.R.HomeTeam = rel1
	m.R.Tournament = rel2

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple matchs and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o MatchTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.MatchSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple matchs and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o MatchTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.MatchSlice, error) {
	var err error
	m := make(models.MatchSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Match has methods that act as mods for the MatchTemplate
var MatchMods matchMods

type matchMods struct{}

func (m matchMods) RandomizeAllColumns(f *faker.Faker) MatchMod {
	return MatchModSlice{
		MatchMods.RandomID(f),
		MatchMods.RandomName(f),
		MatchMods.RandomSlug(f),
		MatchMods.RandomDate(f),
		MatchMods.RandomTimestamp(f),
		MatchMods.RandomHomeRedCards(f),
		MatchMods.RandomAwayRedCards(f),
		MatchMods.RandomHomeID(f),
		MatchMods.RandomAwayID(f),
		MatchMods.RandomTournamentID(f),
		MatchMods.RandomScores(f),
		MatchMods.RandomWinCode(f),
		MatchMods.RandomMatchStatus(f),
		MatchMods.RandomSportType(f),
		MatchMods.RandomHasLineup(f),
		MatchMods.RandomHasTracker(f),
		MatchMods.RandomIsFeatured(f),
		MatchMods.RandomThumbnailURL(f),
		MatchMods.RandomIsLive(f),
		MatchMods.RandomLiveTracker(f),
		MatchMods.RandomCreatedAt(f),
		MatchMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m matchMods) ID(val string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.ID = func() string { return val }
	})
}

// Set the Column from the function
func (m matchMods) IDFunc(f func() string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetID() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomID(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.ID = func() string {
			return random[string](f)
		}
	})
}

func (m matchMods) ensureID(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) Name(val string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m matchMods) NameFunc(f func() string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetName() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomName(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Name = func() string {
			return random[string](f)
		}
	})
}

func (m matchMods) ensureName(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.Name != nil {
			return
		}

		o.Name = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) Slug(val string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Slug = func() string { return val }
	})
}

// Set the Column from the function
func (m matchMods) SlugFunc(f func() string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Slug = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetSlug() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Slug = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomSlug(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Slug = func() string {
			return random[string](f)
		}
	})
}

func (m matchMods) ensureSlug(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.Slug != nil {
			return
		}

		o.Slug = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) Date(val string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Date = func() string { return val }
	})
}

// Set the Column from the function
func (m matchMods) DateFunc(f func() string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Date = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetDate() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Date = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomDate(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Date = func() string {
			return random[string](f)
		}
	})
}

func (m matchMods) ensureDate(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.Date != nil {
			return
		}

		o.Date = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) Timestamp(val int64) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Timestamp = func() int64 { return val }
	})
}

// Set the Column from the function
func (m matchMods) TimestampFunc(f func() int64) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Timestamp = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetTimestamp() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Timestamp = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomTimestamp(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Timestamp = func() int64 {
			return random[int64](f)
		}
	})
}

func (m matchMods) ensureTimestamp(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.Timestamp != nil {
			return
		}

		o.Timestamp = func() int64 {
			return random[int64](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) HomeRedCards(val int) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HomeRedCards = func() int { return val }
	})
}

// Set the Column from the function
func (m matchMods) HomeRedCardsFunc(f func() int) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HomeRedCards = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetHomeRedCards() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HomeRedCards = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomHomeRedCards(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HomeRedCards = func() int {
			return random[int](f)
		}
	})
}

func (m matchMods) ensureHomeRedCards(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.HomeRedCards != nil {
			return
		}

		o.HomeRedCards = func() int {
			return random[int](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) AwayRedCards(val int) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.AwayRedCards = func() int { return val }
	})
}

// Set the Column from the function
func (m matchMods) AwayRedCardsFunc(f func() int) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.AwayRedCards = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetAwayRedCards() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.AwayRedCards = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomAwayRedCards(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.AwayRedCards = func() int {
			return random[int](f)
		}
	})
}

func (m matchMods) ensureAwayRedCards(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.AwayRedCards != nil {
			return
		}

		o.AwayRedCards = func() int {
			return random[int](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) HomeID(val string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HomeID = func() string { return val }
	})
}

// Set the Column from the function
func (m matchMods) HomeIDFunc(f func() string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HomeID = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetHomeID() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HomeID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomHomeID(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HomeID = func() string {
			return random[string](f)
		}
	})
}

func (m matchMods) ensureHomeID(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.HomeID != nil {
			return
		}

		o.HomeID = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) AwayID(val string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.AwayID = func() string { return val }
	})
}

// Set the Column from the function
func (m matchMods) AwayIDFunc(f func() string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.AwayID = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetAwayID() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.AwayID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomAwayID(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.AwayID = func() string {
			return random[string](f)
		}
	})
}

func (m matchMods) ensureAwayID(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.AwayID != nil {
			return
		}

		o.AwayID = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) TournamentID(val string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.TournamentID = func() string { return val }
	})
}

// Set the Column from the function
func (m matchMods) TournamentIDFunc(f func() string) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.TournamentID = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetTournamentID() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.TournamentID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomTournamentID(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.TournamentID = func() string {
			return random[string](f)
		}
	})
}

func (m matchMods) ensureTournamentID(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.TournamentID != nil {
			return
		}

		o.TournamentID = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) Scores(val types.JSON[json.RawMessage]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Scores = func() types.JSON[json.RawMessage] { return val }
	})
}

// Set the Column from the function
func (m matchMods) ScoresFunc(f func() types.JSON[json.RawMessage]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Scores = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetScores() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Scores = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomScores(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.Scores = func() types.JSON[json.RawMessage] {
			return random[types.JSON[json.RawMessage]](f)
		}
	})
}

func (m matchMods) ensureScores(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.Scores != nil {
			return
		}

		o.Scores = func() types.JSON[json.RawMessage] {
			return random[types.JSON[json.RawMessage]](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) WinCode(val null.Val[int]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.WinCode = func() null.Val[int] { return val }
	})
}

// Set the Column from the function
func (m matchMods) WinCodeFunc(f func() null.Val[int]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.WinCode = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetWinCode() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.WinCode = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomWinCode(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.WinCode = func() null.Val[int] {
			return randomNull[int](f)
		}
	})
}

func (m matchMods) ensureWinCode(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.WinCode != nil {
			return
		}

		o.WinCode = func() null.Val[int] {
			return randomNull[int](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) MatchStatus(val MatchStatus) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.MatchStatus = func() MatchStatus { return val }
	})
}

// Set the Column from the function
func (m matchMods) MatchStatusFunc(f func() MatchStatus) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.MatchStatus = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetMatchStatus() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.MatchStatus = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomMatchStatus(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.MatchStatus = func() MatchStatus {
			return random[MatchStatus](f)
		}
	})
}

func (m matchMods) ensureMatchStatus(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.MatchStatus != nil {
			return
		}

		o.MatchStatus = func() MatchStatus {
			return random[MatchStatus](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) SportType(val null.Val[string]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.SportType = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m matchMods) SportTypeFunc(f func() null.Val[string]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.SportType = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetSportType() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.SportType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomSportType(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.SportType = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m matchMods) ensureSportType(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.SportType != nil {
			return
		}

		o.SportType = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) HasLineup(val null.Val[bool]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HasLineup = func() null.Val[bool] { return val }
	})
}

// Set the Column from the function
func (m matchMods) HasLineupFunc(f func() null.Val[bool]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HasLineup = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetHasLineup() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HasLineup = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomHasLineup(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HasLineup = func() null.Val[bool] {
			return randomNull[bool](f)
		}
	})
}

func (m matchMods) ensureHasLineup(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.HasLineup != nil {
			return
		}

		o.HasLineup = func() null.Val[bool] {
			return randomNull[bool](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) HasTracker(val null.Val[bool]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HasTracker = func() null.Val[bool] { return val }
	})
}

// Set the Column from the function
func (m matchMods) HasTrackerFunc(f func() null.Val[bool]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HasTracker = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetHasTracker() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HasTracker = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomHasTracker(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.HasTracker = func() null.Val[bool] {
			return randomNull[bool](f)
		}
	})
}

func (m matchMods) ensureHasTracker(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.HasTracker != nil {
			return
		}

		o.HasTracker = func() null.Val[bool] {
			return randomNull[bool](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) IsFeatured(val null.Val[bool]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.IsFeatured = func() null.Val[bool] { return val }
	})
}

// Set the Column from the function
func (m matchMods) IsFeaturedFunc(f func() null.Val[bool]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.IsFeatured = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetIsFeatured() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.IsFeatured = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomIsFeatured(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.IsFeatured = func() null.Val[bool] {
			return randomNull[bool](f)
		}
	})
}

func (m matchMods) ensureIsFeatured(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.IsFeatured != nil {
			return
		}

		o.IsFeatured = func() null.Val[bool] {
			return randomNull[bool](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) ThumbnailURL(val null.Val[string]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.ThumbnailURL = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m matchMods) ThumbnailURLFunc(f func() null.Val[string]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.ThumbnailURL = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetThumbnailURL() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.ThumbnailURL = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomThumbnailURL(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.ThumbnailURL = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m matchMods) ensureThumbnailURL(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.ThumbnailURL != nil {
			return
		}

		o.ThumbnailURL = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) IsLive(val null.Val[bool]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.IsLive = func() null.Val[bool] { return val }
	})
}

// Set the Column from the function
func (m matchMods) IsLiveFunc(f func() null.Val[bool]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.IsLive = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetIsLive() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.IsLive = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomIsLive(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.IsLive = func() null.Val[bool] {
			return randomNull[bool](f)
		}
	})
}

func (m matchMods) ensureIsLive(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.IsLive != nil {
			return
		}

		o.IsLive = func() null.Val[bool] {
			return randomNull[bool](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) LiveTracker(val null.Val[string]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.LiveTracker = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m matchMods) LiveTrackerFunc(f func() null.Val[string]) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.LiveTracker = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetLiveTracker() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.LiveTracker = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomLiveTracker(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.LiveTracker = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m matchMods) ensureLiveTracker(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.LiveTracker != nil {
			return
		}

		o.LiveTracker = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) CreatedAt(val time.Time) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m matchMods) CreatedAtFunc(f func() time.Time) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetCreatedAt() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomCreatedAt(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.CreatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m matchMods) ensureCreatedAt(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.CreatedAt != nil {
			return
		}

		o.CreatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

// Set the model columns to this value
func (m matchMods) UpdatedAt(val time.Time) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m matchMods) UpdatedAtFunc(f func() time.Time) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m matchMods) UnsetUpdatedAt() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m matchMods) RandomUpdatedAt(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.UpdatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m matchMods) ensureUpdatedAt(f *faker.Faker) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		if o.UpdatedAt != nil {
			return
		}

		o.UpdatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m matchMods) WithAwayTeam(rel *TeamTemplate) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.r.AwayTeam = &matchRAwayTeamR{
			o: rel,
		}
	})
}

func (m matchMods) WithNewAwayTeam(mods ...TeamMod) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {

		related := o.f.NewTeam(mods...)

		m.WithAwayTeam(related).Apply(o)
	})
}

func (m matchMods) WithoutAwayTeam() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.r.AwayTeam = nil
	})
}

func (m matchMods) WithHomeTeam(rel *TeamTemplate) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.r.HomeTeam = &matchRHomeTeamR{
			o: rel,
		}
	})
}

func (m matchMods) WithNewHomeTeam(mods ...TeamMod) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {

		related := o.f.NewTeam(mods...)

		m.WithHomeTeam(related).Apply(o)
	})
}

func (m matchMods) WithoutHomeTeam() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.r.HomeTeam = nil
	})
}

func (m matchMods) WithTournament(rel *TournamentTemplate) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.r.Tournament = &matchRTournamentR{
			o: rel,
		}
	})
}

func (m matchMods) WithNewTournament(mods ...TournamentMod) MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {

		related := o.f.NewTournament(mods...)

		m.WithTournament(related).Apply(o)
	})
}

func (m matchMods) WithoutTournament() MatchMod {
	return MatchModFunc(func(o *MatchTemplate) {
		o.r.Tournament = nil
	})
}
