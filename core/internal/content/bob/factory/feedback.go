// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	models "core/internal/content/bob"
	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker"
	"github.com/stephenafamo/bob"
)

type FeedbackMod interface {
	Apply(*FeedbackTemplate)
}

type FeedbackModFunc func(*FeedbackTemplate)

func (f FeedbackModFunc) Apply(n *FeedbackTemplate) {
	f(n)
}

type FeedbackModSlice []FeedbackMod

func (mods FeedbackModSlice) Apply(n *FeedbackTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// FeedbackTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type FeedbackTemplate struct {
	FeedbackType func() string
	UserID       func() string
	ItemID       func() string
	TimeStamp    func() time.Time
	Comment      func() string

	f *factory
}

// Apply mods to the FeedbackTemplate
func (o *FeedbackTemplate) Apply(mods ...FeedbackMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Feedback
// this does nothing with the relationship templates
func (o FeedbackTemplate) toModel() *models.Feedback {
	m := &models.Feedback{}

	if o.FeedbackType != nil {
		m.FeedbackType = o.FeedbackType()
	}
	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.ItemID != nil {
		m.ItemID = o.ItemID()
	}
	if o.TimeStamp != nil {
		m.TimeStamp = o.TimeStamp()
	}
	if o.Comment != nil {
		m.Comment = o.Comment()
	}

	return m
}

// toModels returns an models.FeedbackSlice
// this does nothing with the relationship templates
func (o FeedbackTemplate) toModels(number int) models.FeedbackSlice {
	m := make(models.FeedbackSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Feedback
// according to the relationships in the template. Nothing is inserted into the db
func (t FeedbackTemplate) setModelRels(o *models.Feedback) {}

// BuildSetter returns an *models.FeedbackSetter
// this does nothing with the relationship templates
func (o FeedbackTemplate) BuildSetter() *models.FeedbackSetter {
	m := &models.FeedbackSetter{}

	if o.FeedbackType != nil {
		m.FeedbackType = omit.From(o.FeedbackType())
	}
	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.ItemID != nil {
		m.ItemID = omit.From(o.ItemID())
	}
	if o.TimeStamp != nil {
		m.TimeStamp = omit.From(o.TimeStamp())
	}
	if o.Comment != nil {
		m.Comment = omit.From(o.Comment())
	}

	return m
}

// BuildManySetter returns an []*models.FeedbackSetter
// this does nothing with the relationship templates
func (o FeedbackTemplate) BuildManySetter(number int) []*models.FeedbackSetter {
	m := make([]*models.FeedbackSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Feedback
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use FeedbackTemplate.Create
func (o FeedbackTemplate) Build() *models.Feedback {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.FeedbackSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use FeedbackTemplate.CreateMany
func (o FeedbackTemplate) BuildMany(number int) models.FeedbackSlice {
	m := make(models.FeedbackSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableFeedback(m *models.FeedbackSetter) {
	if m.FeedbackType.IsUnset() {
		m.FeedbackType = omit.From(random[string](nil))
	}
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random[string](nil))
	}
	if m.ItemID.IsUnset() {
		m.ItemID = omit.From(random[string](nil))
	}
	if m.TimeStamp.IsUnset() {
		m.TimeStamp = omit.From(random[time.Time](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Feedback
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *FeedbackTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Feedback) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a feedback and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *FeedbackTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Feedback, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a feedback and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *FeedbackTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Feedback, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableFeedback(opt)

	m, err := models.FeedbacksTable.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = feedbackCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple feedbacks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o FeedbackTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.FeedbackSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple feedbacks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o FeedbackTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.FeedbackSlice, error) {
	var err error
	m := make(models.FeedbackSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Feedback has methods that act as mods for the FeedbackTemplate
var FeedbackMods feedbackMods

type feedbackMods struct{}

func (m feedbackMods) RandomizeAllColumns(f *faker.Faker) FeedbackMod {
	return FeedbackModSlice{
		FeedbackMods.RandomFeedbackType(f),
		FeedbackMods.RandomUserID(f),
		FeedbackMods.RandomItemID(f),
		FeedbackMods.RandomTimeStamp(f),
		FeedbackMods.RandomComment(f),
	}
}

// Set the model columns to this value
func (m feedbackMods) FeedbackType(val string) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.FeedbackType = func() string { return val }
	})
}

// Set the Column from the function
func (m feedbackMods) FeedbackTypeFunc(f func() string) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.FeedbackType = f
	})
}

// Clear any values for the column
func (m feedbackMods) UnsetFeedbackType() FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.FeedbackType = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m feedbackMods) RandomFeedbackType(f *faker.Faker) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.FeedbackType = func() string {
			return random[string](f)
		}
	})
}

func (m feedbackMods) ensureFeedbackType(f *faker.Faker) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		if o.FeedbackType != nil {
			return
		}

		o.FeedbackType = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m feedbackMods) UserID(val string) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.UserID = func() string { return val }
	})
}

// Set the Column from the function
func (m feedbackMods) UserIDFunc(f func() string) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m feedbackMods) UnsetUserID() FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m feedbackMods) RandomUserID(f *faker.Faker) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.UserID = func() string {
			return random[string](f)
		}
	})
}

func (m feedbackMods) ensureUserID(f *faker.Faker) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		if o.UserID != nil {
			return
		}

		o.UserID = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m feedbackMods) ItemID(val string) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.ItemID = func() string { return val }
	})
}

// Set the Column from the function
func (m feedbackMods) ItemIDFunc(f func() string) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.ItemID = f
	})
}

// Clear any values for the column
func (m feedbackMods) UnsetItemID() FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.ItemID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m feedbackMods) RandomItemID(f *faker.Faker) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.ItemID = func() string {
			return random[string](f)
		}
	})
}

func (m feedbackMods) ensureItemID(f *faker.Faker) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		if o.ItemID != nil {
			return
		}

		o.ItemID = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m feedbackMods) TimeStamp(val time.Time) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.TimeStamp = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m feedbackMods) TimeStampFunc(f func() time.Time) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.TimeStamp = f
	})
}

// Clear any values for the column
func (m feedbackMods) UnsetTimeStamp() FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.TimeStamp = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m feedbackMods) RandomTimeStamp(f *faker.Faker) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.TimeStamp = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m feedbackMods) ensureTimeStamp(f *faker.Faker) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		if o.TimeStamp != nil {
			return
		}

		o.TimeStamp = func() time.Time {
			return random[time.Time](f)
		}
	})
}

// Set the model columns to this value
func (m feedbackMods) Comment(val string) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.Comment = func() string { return val }
	})
}

// Set the Column from the function
func (m feedbackMods) CommentFunc(f func() string) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.Comment = f
	})
}

// Clear any values for the column
func (m feedbackMods) UnsetComment() FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.Comment = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m feedbackMods) RandomComment(f *faker.Faker) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		o.Comment = func() string {
			return random[string](f)
		}
	})
}

func (m feedbackMods) ensureComment(f *faker.Faker) FeedbackMod {
	return FeedbackModFunc(func(o *FeedbackTemplate) {
		if o.Comment != nil {
			return
		}

		o.Comment = func() string {
			return random[string](f)
		}
	})
}
