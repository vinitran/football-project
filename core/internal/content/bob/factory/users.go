// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"encoding/json"

	models "core/internal/content/bob"
	"github.com/aarondl/opt/omit"
	"github.com/jaswdr/faker"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/types"
)

type UserMod interface {
	Apply(*UserTemplate)
}

type UserModFunc func(*UserTemplate)

func (f UserModFunc) Apply(n *UserTemplate) {
	f(n)
}

type UserModSlice []UserMod

func (mods UserModSlice) Apply(n *UserTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// UserTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserTemplate struct {
	UserID    func() string
	Labels    func() types.JSON[json.RawMessage]
	Subscribe func() types.JSON[json.RawMessage]
	Comment   func() string

	f *factory
}

// Apply mods to the UserTemplate
func (o *UserTemplate) Apply(mods ...UserMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.User
// this does nothing with the relationship templates
func (o UserTemplate) toModel() *models.User {
	m := &models.User{}

	if o.UserID != nil {
		m.UserID = o.UserID()
	}
	if o.Labels != nil {
		m.Labels = o.Labels()
	}
	if o.Subscribe != nil {
		m.Subscribe = o.Subscribe()
	}
	if o.Comment != nil {
		m.Comment = o.Comment()
	}

	return m
}

// toModels returns an models.UserSlice
// this does nothing with the relationship templates
func (o UserTemplate) toModels(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.User
// according to the relationships in the template. Nothing is inserted into the db
func (t UserTemplate) setModelRels(o *models.User) {}

// BuildSetter returns an *models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildSetter() *models.UserSetter {
	m := &models.UserSetter{}

	if o.UserID != nil {
		m.UserID = omit.From(o.UserID())
	}
	if o.Labels != nil {
		m.Labels = omit.From(o.Labels())
	}
	if o.Subscribe != nil {
		m.Subscribe = omit.From(o.Subscribe())
	}
	if o.Comment != nil {
		m.Comment = omit.From(o.Comment())
	}

	return m
}

// BuildManySetter returns an []*models.UserSetter
// this does nothing with the relationship templates
func (o UserTemplate) BuildManySetter(number int) []*models.UserSetter {
	m := make([]*models.UserSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.User
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.Create
func (o UserTemplate) Build() *models.User {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserTemplate.CreateMany
func (o UserTemplate) BuildMany(number int) models.UserSlice {
	m := make(models.UserSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUser(m *models.UserSetter) {
	if m.UserID.IsUnset() {
		m.UserID = omit.From(random[string](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.User
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.User) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserTemplate) Create(ctx context.Context, exec bob.Executor) (*models.User, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a user and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.User, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUser(opt)

	m, err := models.UsersTable.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple users and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserSlice, error) {
	var err error
	m := make(models.UserSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// User has methods that act as mods for the UserTemplate
var UserMods userMods

type userMods struct{}

func (m userMods) RandomizeAllColumns(f *faker.Faker) UserMod {
	return UserModSlice{
		UserMods.RandomUserID(f),
		UserMods.RandomLabels(f),
		UserMods.RandomSubscribe(f),
		UserMods.RandomComment(f),
	}
}

// Set the model columns to this value
func (m userMods) UserID(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.UserID = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) UserIDFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.UserID = f
	})
}

// Clear any values for the column
func (m userMods) UnsetUserID() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.UserID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomUserID(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.UserID = func() string {
			return random[string](f)
		}
	})
}

func (m userMods) ensureUserID(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		if o.UserID != nil {
			return
		}

		o.UserID = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Labels(val types.JSON[json.RawMessage]) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Labels = func() types.JSON[json.RawMessage] { return val }
	})
}

// Set the Column from the function
func (m userMods) LabelsFunc(f func() types.JSON[json.RawMessage]) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Labels = f
	})
}

// Clear any values for the column
func (m userMods) UnsetLabels() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Labels = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomLabels(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Labels = func() types.JSON[json.RawMessage] {
			return random[types.JSON[json.RawMessage]](f)
		}
	})
}

func (m userMods) ensureLabels(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		if o.Labels != nil {
			return
		}

		o.Labels = func() types.JSON[json.RawMessage] {
			return random[types.JSON[json.RawMessage]](f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Subscribe(val types.JSON[json.RawMessage]) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Subscribe = func() types.JSON[json.RawMessage] { return val }
	})
}

// Set the Column from the function
func (m userMods) SubscribeFunc(f func() types.JSON[json.RawMessage]) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Subscribe = f
	})
}

// Clear any values for the column
func (m userMods) UnsetSubscribe() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Subscribe = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomSubscribe(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Subscribe = func() types.JSON[json.RawMessage] {
			return random[types.JSON[json.RawMessage]](f)
		}
	})
}

func (m userMods) ensureSubscribe(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		if o.Subscribe != nil {
			return
		}

		o.Subscribe = func() types.JSON[json.RawMessage] {
			return random[types.JSON[json.RawMessage]](f)
		}
	})
}

// Set the model columns to this value
func (m userMods) Comment(val string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Comment = func() string { return val }
	})
}

// Set the Column from the function
func (m userMods) CommentFunc(f func() string) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Comment = f
	})
}

// Clear any values for the column
func (m userMods) UnsetComment() UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Comment = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userMods) RandomComment(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		o.Comment = func() string {
			return random[string](f)
		}
	})
}

func (m userMods) ensureComment(f *faker.Faker) UserMod {
	return UserModFunc(func(o *UserTemplate) {
		if o.Comment != nil {
			return
		}

		o.Comment = func() string {
			return random[string](f)
		}
	})
}
