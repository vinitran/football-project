// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	models "core/internal/content/bob"
	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/jaswdr/faker"
	"github.com/stephenafamo/bob"
)

type UserInforMod interface {
	Apply(*UserInforTemplate)
}

type UserInforModFunc func(*UserInforTemplate)

func (f UserInforModFunc) Apply(n *UserInforTemplate) {
	f(n)
}

type UserInforModSlice []UserInforMod

func (mods UserInforModSlice) Apply(n *UserInforTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// UserInforTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type UserInforTemplate struct {
	ID        func() uuid.UUID
	Username  func() string
	Name      func() string
	Email     func() null.Val[string]
	Password  func() string
	CreatedAt func() time.Time
	UpdatedAt func() time.Time

	f *factory
}

// Apply mods to the UserInforTemplate
func (o *UserInforTemplate) Apply(mods ...UserInforMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.UserInfor
// this does nothing with the relationship templates
func (o UserInforTemplate) toModel() *models.UserInfor {
	m := &models.UserInfor{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Username != nil {
		m.Username = o.Username()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Email != nil {
		m.Email = o.Email()
	}
	if o.Password != nil {
		m.Password = o.Password()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.UserInforSlice
// this does nothing with the relationship templates
func (o UserInforTemplate) toModels(number int) models.UserInforSlice {
	m := make(models.UserInforSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.UserInfor
// according to the relationships in the template. Nothing is inserted into the db
func (t UserInforTemplate) setModelRels(o *models.UserInfor) {}

// BuildSetter returns an *models.UserInforSetter
// this does nothing with the relationship templates
func (o UserInforTemplate) BuildSetter() *models.UserInforSetter {
	m := &models.UserInforSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Username != nil {
		m.Username = omit.From(o.Username())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.Email != nil {
		m.Email = omitnull.FromNull(o.Email())
	}
	if o.Password != nil {
		m.Password = omit.From(o.Password())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.UserInforSetter
// this does nothing with the relationship templates
func (o UserInforTemplate) BuildManySetter(number int) []*models.UserInforSetter {
	m := make([]*models.UserInforSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.UserInfor
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserInforTemplate.Create
func (o UserInforTemplate) Build() *models.UserInfor {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.UserInforSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use UserInforTemplate.CreateMany
func (o UserInforTemplate) BuildMany(number int) models.UserInforSlice {
	m := make(models.UserInforSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableUserInfor(m *models.UserInforSetter) {
	if m.ID.IsUnset() {
		m.ID = omit.From(random[uuid.UUID](nil))
	}
	if m.Username.IsUnset() {
		m.Username = omit.From(random[string](nil))
	}
	if m.Name.IsUnset() {
		m.Name = omit.From(random[string](nil))
	}
	if m.Password.IsUnset() {
		m.Password = omit.From(random[string](nil))
	}
	if m.CreatedAt.IsUnset() {
		m.CreatedAt = omit.From(random[time.Time](nil))
	}
	if m.UpdatedAt.IsUnset() {
		m.UpdatedAt = omit.From(random[time.Time](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.UserInfor
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *UserInforTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.UserInfor) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a userInfor and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *UserInforTemplate) Create(ctx context.Context, exec bob.Executor) (*models.UserInfor, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a userInfor and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *UserInforTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.UserInfor, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableUserInfor(opt)

	m, err := models.UserInforsTable.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = userInforCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple userInfors and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o UserInforTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.UserInforSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple userInfors and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o UserInforTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.UserInforSlice, error) {
	var err error
	m := make(models.UserInforSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// UserInfor has methods that act as mods for the UserInforTemplate
var UserInforMods userInforMods

type userInforMods struct{}

func (m userInforMods) RandomizeAllColumns(f *faker.Faker) UserInforMod {
	return UserInforModSlice{
		UserInforMods.RandomID(f),
		UserInforMods.RandomUsername(f),
		UserInforMods.RandomName(f),
		UserInforMods.RandomEmail(f),
		UserInforMods.RandomPassword(f),
		UserInforMods.RandomCreatedAt(f),
		UserInforMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m userInforMods) ID(val uuid.UUID) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.ID = func() uuid.UUID { return val }
	})
}

// Set the Column from the function
func (m userInforMods) IDFunc(f func() uuid.UUID) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m userInforMods) UnsetID() UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userInforMods) RandomID(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.ID = func() uuid.UUID {
			return random[uuid.UUID](f)
		}
	})
}

func (m userInforMods) ensureID(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() uuid.UUID {
			return random[uuid.UUID](f)
		}
	})
}

// Set the model columns to this value
func (m userInforMods) Username(val string) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Username = func() string { return val }
	})
}

// Set the Column from the function
func (m userInforMods) UsernameFunc(f func() string) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Username = f
	})
}

// Clear any values for the column
func (m userInforMods) UnsetUsername() UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Username = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userInforMods) RandomUsername(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Username = func() string {
			return random[string](f)
		}
	})
}

func (m userInforMods) ensureUsername(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		if o.Username != nil {
			return
		}

		o.Username = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m userInforMods) Name(val string) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m userInforMods) NameFunc(f func() string) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m userInforMods) UnsetName() UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userInforMods) RandomName(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Name = func() string {
			return random[string](f)
		}
	})
}

func (m userInforMods) ensureName(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		if o.Name != nil {
			return
		}

		o.Name = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m userInforMods) Email(val null.Val[string]) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Email = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m userInforMods) EmailFunc(f func() null.Val[string]) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Email = f
	})
}

// Clear any values for the column
func (m userInforMods) UnsetEmail() UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Email = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userInforMods) RandomEmail(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Email = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m userInforMods) ensureEmail(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		if o.Email != nil {
			return
		}

		o.Email = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m userInforMods) Password(val string) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Password = func() string { return val }
	})
}

// Set the Column from the function
func (m userInforMods) PasswordFunc(f func() string) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Password = f
	})
}

// Clear any values for the column
func (m userInforMods) UnsetPassword() UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Password = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userInforMods) RandomPassword(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.Password = func() string {
			return random[string](f)
		}
	})
}

func (m userInforMods) ensurePassword(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		if o.Password != nil {
			return
		}

		o.Password = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m userInforMods) CreatedAt(val time.Time) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userInforMods) CreatedAtFunc(f func() time.Time) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m userInforMods) UnsetCreatedAt() UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userInforMods) RandomCreatedAt(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.CreatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m userInforMods) ensureCreatedAt(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		if o.CreatedAt != nil {
			return
		}

		o.CreatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

// Set the model columns to this value
func (m userInforMods) UpdatedAt(val time.Time) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m userInforMods) UpdatedAtFunc(f func() time.Time) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m userInforMods) UnsetUpdatedAt() UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m userInforMods) RandomUpdatedAt(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		o.UpdatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m userInforMods) ensureUpdatedAt(f *faker.Faker) UserInforMod {
	return UserInforModFunc(func(o *UserInforTemplate) {
		if o.UpdatedAt != nil {
			return
		}

		o.UpdatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}
