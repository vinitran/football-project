// Code generated by BobGen psql v0.21.1. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/google/uuid"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/mods"
)

// Team is an object representing the database table.
type Team struct {
	ID        uuid.UUID        `db:"id,pk" `
	Name      string           `db:"name" `
	ShortName null.Val[string] `db:"short_name" `
	Gender    string           `db:"gender" `
	NameCode  string           `db:"name_code" `
	Logo      string           `db:"logo" `
	Slug      string           `db:"slug" `
	IDSync    string           `db:"id_sync" `
	CreatedAt time.Time        `db:"created_at" `
	UpdatedAt time.Time        `db:"updated_at" `

	R teamR `db:"-" `
}

// TeamSlice is an alias for a slice of pointers to Team.
// This should almost always be used instead of []*Team.
type TeamSlice []*Team

// TeamsTable contains methods to work with the teams table
var TeamsTable = psql.NewTablex[*Team, TeamSlice, *TeamSetter]("", "teams")

// TeamsQuery is a query on the teams table
type TeamsQuery = *psql.TableQuery[*Team, TeamSlice, *TeamSetter]

// TeamsStmt is a prepared statment on teams
type TeamsStmt = bob.QueryStmt[*Team, TeamSlice]

// teamR is where relationships are stored.
type teamR struct {
	AwayMatchs MatchSlice // matchs.matchs_away_id_fkey
	HomeMatchs MatchSlice // matchs.matchs_home_id_fkey
}

// TeamSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TeamSetter struct {
	ID        omit.Val[uuid.UUID]  `db:"id,pk"`
	Name      omit.Val[string]     `db:"name"`
	ShortName omitnull.Val[string] `db:"short_name"`
	Gender    omit.Val[string]     `db:"gender"`
	NameCode  omit.Val[string]     `db:"name_code"`
	Logo      omit.Val[string]     `db:"logo"`
	Slug      omit.Val[string]     `db:"slug"`
	IDSync    omit.Val[string]     `db:"id_sync"`
	CreatedAt omit.Val[time.Time]  `db:"created_at"`
	UpdatedAt omit.Val[time.Time]  `db:"updated_at"`
}

type teamColumnNames struct {
	ID        string
	Name      string
	ShortName string
	Gender    string
	NameCode  string
	Logo      string
	Slug      string
	IDSync    string
	CreatedAt string
	UpdatedAt string
}

type teamRelationshipJoins[Q dialect.Joinable] struct {
	AwayMatchs bob.Mod[Q]
	HomeMatchs bob.Mod[Q]
}

func buildteamRelationshipJoins[Q dialect.Joinable](ctx context.Context, typ string) teamRelationshipJoins[Q] {
	return teamRelationshipJoins[Q]{
		AwayMatchs: teamsJoinAwayMatchs[Q](ctx, typ),
		HomeMatchs: teamsJoinHomeMatchs[Q](ctx, typ),
	}
}

func teamsJoin[Q dialect.Joinable](ctx context.Context) joinSet[teamRelationshipJoins[Q]] {
	return joinSet[teamRelationshipJoins[Q]]{
		InnerJoin: buildteamRelationshipJoins[Q](ctx, clause.InnerJoin),
		LeftJoin:  buildteamRelationshipJoins[Q](ctx, clause.LeftJoin),
		RightJoin: buildteamRelationshipJoins[Q](ctx, clause.RightJoin),
	}
}

var TeamColumns = struct {
	ID        psql.Expression
	Name      psql.Expression
	ShortName psql.Expression
	Gender    psql.Expression
	NameCode  psql.Expression
	Logo      psql.Expression
	Slug      psql.Expression
	IDSync    psql.Expression
	CreatedAt psql.Expression
	UpdatedAt psql.Expression
}{
	ID:        psql.Quote("teams", "id"),
	Name:      psql.Quote("teams", "name"),
	ShortName: psql.Quote("teams", "short_name"),
	Gender:    psql.Quote("teams", "gender"),
	NameCode:  psql.Quote("teams", "name_code"),
	Logo:      psql.Quote("teams", "logo"),
	Slug:      psql.Quote("teams", "slug"),
	IDSync:    psql.Quote("teams", "id_sync"),
	CreatedAt: psql.Quote("teams", "created_at"),
	UpdatedAt: psql.Quote("teams", "updated_at"),
}

type teamWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, uuid.UUID]
	Name      psql.WhereMod[Q, string]
	ShortName psql.WhereNullMod[Q, string]
	Gender    psql.WhereMod[Q, string]
	NameCode  psql.WhereMod[Q, string]
	Logo      psql.WhereMod[Q, string]
	Slug      psql.WhereMod[Q, string]
	IDSync    psql.WhereMod[Q, string]
	CreatedAt psql.WhereMod[Q, time.Time]
	UpdatedAt psql.WhereMod[Q, time.Time]
}

func TeamWhere[Q psql.Filterable]() teamWhere[Q] {
	return teamWhere[Q]{
		ID:        psql.Where[Q, uuid.UUID](TeamColumns.ID),
		Name:      psql.Where[Q, string](TeamColumns.Name),
		ShortName: psql.WhereNull[Q, string](TeamColumns.ShortName),
		Gender:    psql.Where[Q, string](TeamColumns.Gender),
		NameCode:  psql.Where[Q, string](TeamColumns.NameCode),
		Logo:      psql.Where[Q, string](TeamColumns.Logo),
		Slug:      psql.Where[Q, string](TeamColumns.Slug),
		IDSync:    psql.Where[Q, string](TeamColumns.IDSync),
		CreatedAt: psql.Where[Q, time.Time](TeamColumns.CreatedAt),
		UpdatedAt: psql.Where[Q, time.Time](TeamColumns.UpdatedAt),
	}
}

// Teams begins a query on teams
func Teams(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) TeamsQuery {
	return TeamsTable.Query(ctx, exec, mods...)
}

// FindTeam retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTeam(ctx context.Context, exec bob.Executor, IDPK uuid.UUID, cols ...string) (*Team, error) {
	if len(cols) == 0 {
		return TeamsTable.Query(
			ctx, exec,
			SelectWhere.Teams.ID.EQ(IDPK),
		).One()
	}

	return TeamsTable.Query(
		ctx, exec,
		SelectWhere.Teams.ID.EQ(IDPK),
		sm.Columns(TeamsTable.Columns().Only(cols...)),
	).One()
}

// TeamExists checks the presence of a single record by primary key
func TeamExists(ctx context.Context, exec bob.Executor, IDPK uuid.UUID) (bool, error) {
	return TeamsTable.Query(
		ctx, exec,
		SelectWhere.Teams.ID.EQ(IDPK),
	).Exists()
}

// Update uses an executor to update the Team
func (o *Team) Update(ctx context.Context, exec bob.Executor, cols ...string) (int64, error) {
	rowsAff, err := TeamsTable.Update(ctx, exec, o, cols...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

// Delete deletes a single Team record with an executor
func (o *Team) Delete(ctx context.Context, exec bob.Executor) (int64, error) {
	return TeamsTable.Delete(ctx, exec, o)
}

// Reload refreshes the Team using the executor
func (o *Team) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := TeamsTable.Query(
		ctx, exec,
		SelectWhere.Teams.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o TeamSlice) DeleteAll(ctx context.Context, exec bob.Executor) (int64, error) {
	return TeamsTable.DeleteMany(ctx, exec, o...)
}

func (o TeamSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TeamSetter) (int64, error) {
	rowsAff, err := TeamsTable.UpdateMany(ctx, exec, &vals, o...)
	if err != nil {
		return rowsAff, err
	}

	return rowsAff, nil
}

func (o TeamSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]uuid.UUID, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Teams.ID.In(IDPK...),
	)

	o2, err := Teams(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func teamsJoinAwayMatchs[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, MatchsTable.Name(ctx)).On(
			MatchColumns.AwayID.EQ(TeamColumns.ID),
		),
	}
}
func teamsJoinHomeMatchs[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, MatchsTable.Name(ctx)).On(
			MatchColumns.HomeID.EQ(TeamColumns.ID),
		),
	}
}

// AwayMatchs starts a query for related objects on matchs
func (o *Team) AwayMatchs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) MatchsQuery {
	return Matchs(ctx, exec, append(mods,
		sm.Where(MatchColumns.AwayID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os TeamSlice) AwayMatchs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) MatchsQuery {
	PKArgs := make([]bob.Expression, 0, len(os))
	for _, o := range os {
		PKArgs = append(PKArgs, psql.ArgGroup(o.ID))
	}

	return Matchs(ctx, exec, append(mods,
		sm.Where(psql.Group(MatchColumns.AwayID).In(PKArgs...)),
	)...)
}

// HomeMatchs starts a query for related objects on matchs
func (o *Team) HomeMatchs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) MatchsQuery {
	return Matchs(ctx, exec, append(mods,
		sm.Where(MatchColumns.HomeID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os TeamSlice) HomeMatchs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) MatchsQuery {
	PKArgs := make([]bob.Expression, 0, len(os))
	for _, o := range os {
		PKArgs = append(PKArgs, psql.ArgGroup(o.ID))
	}

	return Matchs(ctx, exec, append(mods,
		sm.Where(psql.Group(MatchColumns.HomeID).In(PKArgs...)),
	)...)
}

func (o *Team) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "AwayMatchs":
		rels, ok := retrieved.(MatchSlice)
		if !ok {
			return fmt.Errorf("team cannot load %T as %q", retrieved, name)
		}

		o.R.AwayMatchs = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.AwayTeam = o
			}
		}
		return nil
	case "HomeMatchs":
		rels, ok := retrieved.(MatchSlice)
		if !ok {
			return fmt.Errorf("team cannot load %T as %q", retrieved, name)
		}

		o.R.HomeMatchs = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.HomeTeam = o
			}
		}
		return nil
	default:
		return fmt.Errorf("team has no relationship %q", name)
	}
}

func ThenLoadTeamAwayMatchs(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTeamAwayMatchs(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TeamAwayMatchs", retrieved)
		}

		err := loader.LoadTeamAwayMatchs(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTeamAwayMatchs loads the team's AwayMatchs into the .R struct
func (o *Team) LoadTeamAwayMatchs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.AwayMatchs = nil

	related, err := o.AwayMatchs(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.AwayTeam = o
	}

	o.R.AwayMatchs = related
	return nil
}

// LoadTeamAwayMatchs loads the team's AwayMatchs into the .R struct
func (os TeamSlice) LoadTeamAwayMatchs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	matchs, err := os.AwayMatchs(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.AwayMatchs = nil
	}

	for _, o := range os {
		for _, rel := range matchs {
			if o.ID != rel.AwayID {
				continue
			}

			rel.R.AwayTeam = o

			o.R.AwayMatchs = append(o.R.AwayMatchs, rel)
		}
	}

	return nil
}

func ThenLoadTeamHomeMatchs(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTeamHomeMatchs(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TeamHomeMatchs", retrieved)
		}

		err := loader.LoadTeamHomeMatchs(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTeamHomeMatchs loads the team's HomeMatchs into the .R struct
func (o *Team) LoadTeamHomeMatchs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.HomeMatchs = nil

	related, err := o.HomeMatchs(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.HomeTeam = o
	}

	o.R.HomeMatchs = related
	return nil
}

// LoadTeamHomeMatchs loads the team's HomeMatchs into the .R struct
func (os TeamSlice) LoadTeamHomeMatchs(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	matchs, err := os.HomeMatchs(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.HomeMatchs = nil
	}

	for _, o := range os {
		for _, rel := range matchs {
			if o.ID != rel.HomeID {
				continue
			}

			rel.R.HomeTeam = o

			o.R.HomeMatchs = append(o.R.HomeMatchs, rel)
		}
	}

	return nil
}

func (o *Team) InsertAwayMatchs(ctx context.Context, exec bob.Executor, related ...*MatchSetter) error {
	var err error

	rels := related

	for _, rel := range rels {
		rel.AwayID = omit.From(o.ID)
	}

	newRels, err := MatchsTable.InsertMany(ctx, exec, related...)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	o.R.AwayMatchs = append(o.R.AwayMatchs, newRels...)

	for _, rel := range newRels {
		rel.R.AwayTeam = o
	}

	return nil
}

func (o *Team) AttachAwayMatchs(ctx context.Context, exec bob.Executor, related ...*Match) error {

	for _, rel := range related {
		rel.AwayID = o.ID
	}

	if _, err := MatchsTable.UpdateMany(
		ctx, exec, &MatchSetter{
			AwayID: omit.From(o.ID),
		}, related...,
	); err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	o.R.AwayMatchs = append(o.R.AwayMatchs, related...)

	for _, rel := range related {
		rel.R.AwayTeam = o
	}

	return nil
}

func (o *Team) InsertHomeMatchs(ctx context.Context, exec bob.Executor, related ...*MatchSetter) error {
	var err error

	rels := related

	for _, rel := range rels {
		rel.HomeID = omit.From(o.ID)
	}

	newRels, err := MatchsTable.InsertMany(ctx, exec, related...)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}
	o.R.HomeMatchs = append(o.R.HomeMatchs, newRels...)

	for _, rel := range newRels {
		rel.R.HomeTeam = o
	}

	return nil
}

func (o *Team) AttachHomeMatchs(ctx context.Context, exec bob.Executor, related ...*Match) error {

	for _, rel := range related {
		rel.HomeID = o.ID
	}

	if _, err := MatchsTable.UpdateMany(
		ctx, exec, &MatchSetter{
			HomeID: omit.From(o.ID),
		}, related...,
	); err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	o.R.HomeMatchs = append(o.R.HomeMatchs, related...)

	for _, rel := range related {
		rel.R.HomeTeam = o
	}

	return nil
}
