services:
  api:
    container_name: api_core
    restart: unless-stopped
    build:
      context: ./core
      dockerfile: Dockerfile
    ports:
      - 0.0.0.0:3030:3030
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - football
    volumes:
      - ./core/internal/config/test.config.toml:/app/config.toml
    command:
      - "/bin/sh"
      - "-c"
      - "/app/main api"

  migrate-up:
    container_name: migrate-up
    build:
      context: ./core
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - football
    volumes:
      - ./core/internal/config/test.config.toml:/app/config.toml
    command:
      - "/bin/sh"
      - "-c"
      - "/app/main migration --action up --cfg /app/config.toml"

  gorse:
    image: zhenghaoz/gorse-in-one
    restart: unless-stopped
    ports:
      - 8086:8086   # gRPC port
      - 8088:8088   # HTTP port
    environment:
      # Use Redis as cache storage backend.
      GORSE_CACHE_STORE: redis://redis:6379/0
      # Use MySQL as data storage backend.
      GORSE_DATA_STORE: postgres://postgres:123456@postgres:5432/postgres?sslmode=disable
    networks:
      - football
    command: >
      -c /etc/gorse/config.toml 
      --log-path /var/log/gorse/master.log 
      --cache-path /var/lib/gorse/master_cache.data
    volumes:
      # Mount the configuration file.
      - ./config.toml:/etc/gorse/config.toml
    depends_on:
      - redis
      - postgres

  migrate-down:
    container_name: migrate-up
    build:
      context: ./core
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - football
    volumes:
      - ./core/internal/config/test.config.toml:/app/config.toml
    command:
      - "/bin/sh"
      - "-c"
      - "/app/main migration --action down --cfg /app/config.toml"

  postgres:
    container_name: bridge_postgres
    image: postgres:14.1-alpine
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - 5432
    user: root
    volumes:
      - ./pgdata/production/data:${PGDATA}
      - ./config/postgres/initdb.d:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PGDATA: ${PGDATA}
    networks:
      - football
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 2s
      retries: 5

  redis:
    container_name: bridge_redis
    image: redis:7-alpine
    networks:
      - football
    volumes:
      - ./redisdata:/data
      - ./config/redis/redis.conf:/usr/local/etc/redis/redis-custom.conf
    restart: unless-stopped
    ports:
      - 6379
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    command:
      ["redis-server", "--include /usr/local/etc/redis/redis-custom.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 2s
      retries: 10

networks:
  football:
